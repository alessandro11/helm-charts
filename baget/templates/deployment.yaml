apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "baget.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "baget.name" . }}
    helm.sh/chart: {{ include "baget.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "baget.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "baget.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "baget.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: CONSOLE__LOGLEVEL
              value: {{ .Values.loglevel }}
            - name: DATABASE__TYPE
              value: {{ .Values.database.type }}
            - name: DATABASE__CONNECTIONSTRING
              value: {{ .Values.database.connectionString }}
            - name: STORAGE__TYPE
              value: {{ .Values.storage.type }}
            - name: STORAGE__BUCKET
              value: {{ .Values.storage.bucket | quote }}
            - name: STORAGE__REGION
              value: {{ .Values.storage.region | quote }}
          {{- range $secret := .Values.secretsParameters }}
            - name: {{ $secret }}
              valueFrom:
                secretKeyRef:
                  name: secret-{{ $.Values.secretsName }}
                  key: {{ $secret }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbe.path }}
              port: {{ .Values.deployment.livenessProbe.port }}
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployment.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: {{ .Values.deployment.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployment.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
          volumeMounts:
          - name: baget-data
            mountPath: /var/baget-data
          - name: vol-secrets
            mountPath: /mnt/secrets
            readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- if .Values.persistence.bagetData.enabled }}
        - name: baget-data
          persistentVolumeClaim:
            claimName: {{ template "baget.fullname" . }}-data
      {{- else }}
        emptyDir: {}
      {{- end }}
        - name: vol-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{- include "users.secret" . | indent 1}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
